program → decl_list
decl_list →  decl decl_list`
decl_list` → decl decl_list` | ε
decl → var_decl | fun_decl
var_decl → type_spec IDENT B
B →  [ ] ; | ε ;
type_spec → VOID | BOOL | INT | FLOAT
fun_decl → type_spec IDENT ( params ) compound_stmt
params → param_list | VOID
param_list → param  param_list`
param_list`→ , param  param_list` | ε
param → type_spec IDENT BB
BB→  [ ] | ε
stmt_list →  stmt_list`
stmt_list` → stmt stmt_list`| ε
stmt → expr_stmt | compound_stmt | if_stmt | while_stmt | return_stmt | break_stmt
expr_stmt → expr ; | ;
while_stmt → WHILE ( expr ) stmt
compound_stmt → { local_decls stmt_list }
local_decls →   local_decls` 
local_decls` →   local_decl local_decls` | ε
local_decl → type_spec IDENT  B
if_stmt → IF ( expr ) stmt BBBB
BBBB → ε | ELSE stmt
return_stmt → RETURN x
x → ; | expr ;
expr → IDENT Z
Z  → = expr | [ expr ] = expr |  ε  |  [ expr ] |  ( args ) | . size
expr → expr`
expr`→ T expr` | ε
T → OR expr | EQ expr | NE expr |LE expr | < expr |GE expr |> expr|AND exp|+ expr| - expr | * expr | / expr | % expr
expr → ! expr | - expr | + expr
expr → ( expr )
expr → BOOL_LIT | INT_LIT | FLOAT_LIT | NEW type_spec [ expr ]
arg_list → expr arg_list'
arg_list' → , expr  arg_list' | ε
args → arg_list | ε
